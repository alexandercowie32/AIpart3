(ns matcher-starter.core
  (:require [org.clojars.cognesence.breadth-search.core :refer :all]
            [org.clojars.cognesence.matcher.core :refer :all]
            [org.clojars.cognesence.ops-search.core :refer :all])
  )


(def start-state
  '#{(at elevator ground)
     (at Person fifth)
     (waiting Person false)
     (moving elevator false)
     (contains elevator nil)
     (open door true)
     })
(def world
  '#{
     (container elevator)
     (obstacle door)
     (agent Person)
     (floor ground)
     (floor first)
     (floor second)
     (floor third)
     (floor fourth)
     (floor fifth)
     (moving-up ground first)
     (moving-up first second)
     (moving-up second third)
     (moving-up third fourth)
     (moving-up fourth fifth)
     (moving-down first ground)
     (moving-down second first)
     (moving-down third second)
     (moving-down fourth third)
     (moving-down fifth fourth)

     }
  )

;probably could consolidate the moving ups and the moving downs,
;regardless of occupancy

(def operators
  '{button-pressed {;emulates calling an elevator by an agent
                :pre ((agent ?Person)
                      (obstacle ?door)
                      (container ?elevator)
                      (contains ?lift nil)
                      (moving elevator false)
                      (at ?elevator ?floor)
                      (open ?door false)
                      (at ?Person ?person-floor))
                :add((moving ?elevator true))
                :del((moving ?elevator false))
                :txt(?Person called ?elevator from ?person-floor floor.)
                :cmd(call ?elevator)
                }
    stop-elevator{;stop the lift moving
                  :pre((container ?elevator)
                       (obstacle ?door)

                       (moving ?elevator true)
                       (open ?door false))
                  :add((moving ?elevator false))
                  :del((moving ?elevator true))
                  :txt(The elevator has stopped.)
                  :cmd(stop elevator)
                  }
    open-door {;opens elevator's door
                :pre ((container ?elevator)
                      (obstacle ?door)
                      (open ?door false)
                      (moving ?elevator false))
                :add ((open ?door true))
                :del ((open ?door false))
                :txt (Doors are opening...)
                :cmd (open door)
                }
    close-door {
                :pre ((container ?elevator)
                      (obstacle ?door)
                      (open ?door true)
                      (moving ?elevator false))
                :add ((open ?door false))
                :del ((open ?door true))
                :txt (Doors are closing...)
                :cmd (close door)
                }
    empty-going-up{;moving the lift when it is not occupied
             :pre((container ?elevator)
                  (obstacle ?door)
                  (open ?door false)
                  (contains ?elevator nil)
                  (agent ?Person)
                  (waiting ?Person true)
                  (moving ?elevator true)
                  (at ?elevator ?floor)
                  (moving-up ?floor ?moving-up))
             :add((at ?elevator ?moving-up))
             :del((at ?elevator ?floor))
             :txt(Elevator goes up from ?floor floor to ?moving-up floor.)
             :cmd(ascend elevator)
              }
    empty-going-down{;moving the lift when not occupied
               :pre((container ?elevator)
                    (obstacle ?door)
                    (open ?door false)
                    (contains ?elevator nil)
                    (agent ?Person)
                    (waiting ?Person true)
                    (moving ?elevator true)
                    (at ?elevator ?floor)
                    (moving-down ?floor ?moving-down))
               :add((at ?elevator ?moving-down))
               :del((at ?elevator ?floor))
               :txt(Elevator goes down from ?floor floor to ?moving-down floor.)
               :cmd(descend elevator)
                }
    going-up-with-person{;moving the occupant up one floor
                    :pre((container ?elevator)
                         (obstacle ?door)
                         (open ?door false)
                         (agent ?Person)
                         (contains ?elevator ?Person)
                         (moving ?elevator true)
                         (waiting ?Person true)
                         (at ?elevator ?floor)
                         (moving-up ?floor ?moving-up))
                    :add((at ?elevator ?moving-up)
                         (at ?Person ?moving-up))
                    :del((at ?elevator ?floor)
                         (at ?Person ?floor))
                    :txt(Elevator goes up from ?floor floor to ?moving-up floor with ?Person inside.)
                    :cmd(ascend person)
                    }
    going-down-with-person{;moving the occupant down one floor
                      :pre((container ?elevator)
                           (obstacle ?door)
                           (open ?door false)
                           (agent ?Person)
                           (waiting ?Person true)
                           (contains ?elevator ?Person)
                           (moving ?elevator true)
                           (at ?elevator ?floor)
                           (moving-down ?floor ?moving-down))
                       :add((at ?elevator ?moving-down)
                            (at ?Person ?moving-down))
                       :del((at ?elevator ?floor)
                            (at ?Person ?floor))
                       :txt(Elevator goes down from ?floor floor to ?moving-down floor with ?Person inside.)
                       :cmd(descend person)
                       }

    wait-for-elevator{;wait for the lift to reach the floor the agent is on
                 :pre((container ?elevator)
                      (obstacle ?door)
                      (open ?door false)
                      (agent ?Person)
                      (waiting ?Person false)
                      (at ?elevator ?floor)
                      (at ?Person ?person-floor)
                      (moving ?elevator true))
                 :add((waiting ?Person true))
                 :del((waiting ?Person false))
                 :txt(waiting for ?elevator to reach ?person-floor floor.)
                 :cmd(waiting at ?person-floor)
             }
    person-enters-elevator{;person enters the lift
           :pre((container ?elevator)
                (obstacle ?door)
                (open ?door true)
                (agent ?person)
                (contains ?elevator nil)
                (at ?person ?person-floor)
                (at ?elevator ?person-floor)
                (waiting ?person true)
                (moving ?elevator false))
           :add((contains ?elevator ?person)
                (waiting ?person false))
           :del((contains ?elevator nil)
                (waiting ?person true))
           :txt(?person entered the ?elevator)
           :cmd(enter ?elevator)
           }
    person-selects-floor{;person selects the floor and lift starts moving
                  :pre((agent ?person)
                       (waiting ?person false)
                       (obstacle ?door)
                       (open ?door false)
                       (container ?elevator)
                       (contains ?elevator ?person)
                       (moving ?elevator false))
                  :add((moving ?elevator true)
                       (waiting ?person true))
                  :del((moving ?elevator false)
                       (waiting ?person false))
                  :txt(floor selected)
                  :cmd(select floor)
                  }
    wait-selected{;person waits for lift to take them to their floor
                   :pre((agent ?person)
                        (container ?elevator)
                        (obstacle ?door)
                        (open ?door false)
                        (contains ?elevator ?person)
                        (moving ?elevator true)
                        (waiting ?person false))
                   :add((waiting ?person true))
                   :del((waiting ?person false))
                   :txt(waiting to reach selected floor)
                   :cmd(wait in elevator)
                   }
    person-exits-elevator{;person exits the lift
          :pre((container ?elevator)
               (obstacle ?door)
               (agent ?person)
               (contains ?elevator ?person)
               (waiting ?person true)
               (at ?person ?person-floor)
               (at ?elevator ?person-floor)
               (moving ?elevator false)
               (open ?door true))
          :add((contains ?elevator nil)
               (waiting ?person false))
          :del((contains ?elevator ?person)
               (waiting ?person true))
          :txt(?person exited ?elevator)
          :cmd(exit ?elevator)
          }
    }
  )
